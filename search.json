[{"path":[]},{"path":"https://colossal-compsci.github.io/tfboot/articles/intro.html","id":"motivation","dir":"Articles","previous_headings":"Introduction","what":"Motivation","title":"Statistical analysis of TFBS disruption with tfboot","text":"motifbreakR package provides functions assess single nucleotide polymorphisms (SNPs) disrupt transcript factor binding sites (TFBS). tfboot package provides helper functions aid assessing statistical significance TFBS disruption interval sets, typically defined -5kb upstream promoter regions genes interest. example question might : 123 genes interest think important XYZ phenotype. Can assess degree SNPs promoter region genes disrupt TFBS? disruption 123 genes statistically significant compared SNPs randomly selected sets number genes?","code":""},{"path":"https://colossal-compsci.github.io/tfboot/articles/intro.html","id":"setup","dir":"Articles","previous_headings":"Introduction","what":"Setup","title":"Statistical analysis of TFBS disruption with tfboot","text":"run vignette, ’ll need chicken BSGenome+TxDb+org.db packages, plyranges, motifbreakR packages, can installed bioconductor. ’ll also need install tfboot package, can source, directly GitHub personal access token.","code":"install.packages(\"BiocManager\") BiocManager::install(c(\"BSgenome.Ggallus.UCSC.galGal6\",                         \"org.Gg.eg.db\",                         \"TxDb.Ggallus.UCSC.galGal6.refGene\",                         \"plyranges\",                         \"motifbreakR\"), update=FALSE)  install.packages(\"devtools\") devtools::install_github(\"https://github.com/colossal-compsci/tfboot\", auth_token=\"REPLACE_WITH_YOUR_PAT\", upgrade=FALSE)"},{"path":"https://colossal-compsci.github.io/tfboot/articles/intro.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic usage","title":"Statistical analysis of TFBS disruption with tfboot","text":"First, load libraries need analysis. Use read_vcf() read VCF. example used VCF variants chicken (Gallus gallus) chromosome 33. Note VCF must pre-filtered include variant sites. information can found help page (?read_vcf). get_upstream_snps() function tfboot takes SNP list TxDb object, turns intervals 5kb upstream transcription start site genes list. See help ?get_upstream_snps() helper function calls, get_upstream(). function also respects strand information embedded genome. example building TxDb object GTF, see ?GenomicFeatures::makeTxDbPackage. code used create canFam3 TxDb object GitHub. get 5kb upstream promoter region genes SNPs (limited chromosome 33 example). Now, let’s select set five random genes interest. genes? can pull SNPs 5kb promoter region just SNPs. many SNPs promoter region genes interest? ’s median number SNPs across genes? Now, let’s run motifbreakR analysis 2022 JASPAR database 5 genes. First let’s look TFBS motifs. See ?MotifDb info. Now, let’s run motifbreakR SNPs promoter regions 5 genes. result motifbreakR analysis GenomicRanges object. Additionally, let’s run motifbreakR SNPs promoter regions genes (remember, entire analysis restricted chromosome 33 ). Let’s use tfboot’s mb_to_tibble() function create compact tibble . ’ll use data statistical analysis coming next. reality, perform motifbreakR results across whole genome, analysis take time (perhaps hours), depending number cores allocated job. recommend perform every gene genome, save compact tibble (mball example) using save() saveRDS() read later, avoiding need re-run genome-wide motifbreakR analysis time. can something like :","code":"library(BSgenome.Ggallus.UCSC.galGal6) library(TxDb.Ggallus.UCSC.galGal6.refGene) library(org.Gg.eg.db) library(plyranges) library(motifbreakR) library(tfboot) vcf_file <- system.file(\"extdata\", \"galGal6-chr33.vcf.gz\", package=\"tfboot\", mustWork = TRUE) snps <- read_vcf(file=vcf_file, bsgenome=BSgenome.Ggallus.UCSC.galGal6) snps #> GRanges object with 20000 ranges and 6 metadata columns: #>                     seqnames    ranges strand | paramRangeID            REF #>                        <Rle> <IRanges>  <Rle> |     <factor> <DNAStringSet> #>     chr33:10054_G/T    chr33     10054      * |           NA              G #>     chr33:11031_T/C    chr33     11031      * |           NA              T #>     chr33:11148_T/G    chr33     11148      * |           NA              T #>     chr33:11400_G/C    chr33     11400      * |           NA              G #>     chr33:11496_G/A    chr33     11496      * |           NA              G #>                 ...      ...       ...    ... .          ...            ... #>   chr33:7810067_A/C    chr33   7810067      * |           NA              A #>   chr33:7810166_G/A    chr33   7810166      * |           NA              G #>   chr33:7810888_T/G    chr33   7810888      * |           NA              T #>   chr33:7810896_T/A    chr33   7810896      * |           NA              T #>   chr33:7811431_G/A    chr33   7811431      * |           NA              G #>                                ALT      QUAL      FILTER            SNP_id #>                     <DNAStringSet> <numeric> <character>       <character> #>     chr33:10054_G/T              T        NA           .   chr33:10054_G/T #>     chr33:11031_T/C              C        NA           .   chr33:11031_T/C #>     chr33:11148_T/G              G        NA           .   chr33:11148_T/G #>     chr33:11400_G/C              C        NA           .   chr33:11400_G/C #>     chr33:11496_G/A              A        NA           .   chr33:11496_G/A #>                 ...            ...       ...         ...               ... #>   chr33:7810067_A/C              C        NA           . chr33:7810067_A/C #>   chr33:7810166_G/A              A        NA           . chr33:7810166_G/A #>   chr33:7810888_T/G              G        NA           . chr33:7810888_T/G #>   chr33:7810896_T/A              A        NA           . chr33:7810896_T/A #>   chr33:7811431_G/A              A        NA           . chr33:7811431_G/A #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths prosnps <- get_upstream_snps(snps, txdb=TxDb.Ggallus.UCSC.galGal6.refGene)  prosnps #> GRanges object with 685 ranges and 8 metadata columns: #>                     seqnames    ranges strand | paramRangeID            REF #>                        <Rle> <IRanges>  <Rle> |     <factor> <DNAStringSet> #>   chr33:3630733_A/G    chr33   3630733      * |           NA              A #>   chr33:3630900_A/T    chr33   3630900      * |           NA              A #>   chr33:3631029_G/T    chr33   3631029      * |           NA              G #>   chr33:3631819_G/C    chr33   3631819      * |           NA              G #>   chr33:3631916_T/C    chr33   3631916      * |           NA              T #>                 ...      ...       ...    ... .          ...            ... #>   chr33:7721873_G/A    chr33   7721873      * |           NA              G #>   chr33:7721994_A/T    chr33   7721994      * |           NA              A #>   chr33:7722028_G/T    chr33   7722028      * |           NA              G #>   chr33:7722600_C/A    chr33   7722600      * |           NA              C #>   chr33:7723117_A/C    chr33   7723117      * |           NA              A #>                                ALT      QUAL      FILTER            SNP_id #>                     <DNAStringSet> <numeric> <character>       <character> #>   chr33:3630733_A/G              G        NA           . chr33:3630733_A/G #>   chr33:3630900_A/T              T        NA           . chr33:3630900_A/T #>   chr33:3631029_G/T              T        NA           . chr33:3631029_G/T #>   chr33:3631819_G/C              C        NA           . chr33:3631819_G/C #>   chr33:3631916_T/C              C        NA           . chr33:3631916_T/C #>                 ...            ...       ...         ...               ... #>   chr33:7721873_G/A              A        NA           . chr33:7721873_G/A #>   chr33:7721994_A/T              T        NA           . chr33:7721994_A/T #>   chr33:7722028_G/T              T        NA           . chr33:7722028_G/T #>   chr33:7722600_C/A              A        NA           . chr33:7722600_C/A #>   chr33:7723117_A/C              C        NA           . chr33:7723117_A/C #>                         gene_id ranges_original #>                     <character>       <IRanges> #>   chr33:3630733_A/G      776487 3635699-3637068 #>   chr33:3630900_A/T      776487 3635699-3637068 #>   chr33:3631029_G/T      776487 3635699-3637068 #>   chr33:3631819_G/C      776487 3635699-3637068 #>   chr33:3631916_T/C      776487 3635699-3637068 #>                 ...         ...             ... #>   chr33:7721873_G/A      424136 7724062-7729597 #>   chr33:7721994_A/T      424136 7724062-7729597 #>   chr33:7722028_G/T      424136 7724062-7729597 #>   chr33:7722600_C/A      424136 7724062-7729597 #>   chr33:7723117_A/C      424136 7724062-7729597 #>   ------- #>   seqinfo: 1 sequence from galGal6 genome set.seed(123) mygenes <- sample(unique(prosnps$gene_id), 5) mygenes #> [1] \"693249\"    \"408041\"    \"100316005\" \"408042\"    \"100498692\" AnnotationDbi::select(org.Gg.eg.db,                        key=mygenes,                        columns=c(\"ENTREZID\", \"SYMBOL\", \"GENENAME\"),                        keytype=\"ENTREZID\") #>    ENTREZID  SYMBOL      GENENAME #> 1    693249   CAPN1     calpain 1 #> 2    408041   KRT6A    keratin 6A #> 3 100316005 MIR2130 microRNA 2130 #> 4    408042   KRT75    keratin 75 #> 5 100498692 MIR3534 microRNA 3534 myprosnps <-    prosnps |>    filter(gene_id %in% mygenes)  myprosnps #> GRanges object with 60 ranges and 8 metadata columns: #>                     seqnames    ranges strand | paramRangeID            REF #>                        <Rle> <IRanges>  <Rle> |     <factor> <DNAStringSet> #>   chr33:3804056_G/C    chr33   3804056      * |           NA              G #>   chr33:3805103_A/C    chr33   3805103      * |           NA              A #>   chr33:3805111_G/T    chr33   3805111      * |           NA              G #>   chr33:3805659_T/C    chr33   3805659      * |           NA              T #>   chr33:3805709_C/G    chr33   3805709      * |           NA              C #>                 ...      ...       ...    ... .          ...            ... #>   chr33:7473031_T/C    chr33   7473031      * |           NA              T #>   chr33:7473583_G/A    chr33   7473583      * |           NA              G #>   chr33:7473834_G/T    chr33   7473834      * |           NA              G #>   chr33:7473857_T/C    chr33   7473857      * |           NA              T #>   chr33:7475206_A/C    chr33   7475206      * |           NA              A #>                                ALT      QUAL      FILTER            SNP_id #>                     <DNAStringSet> <numeric> <character>       <character> #>   chr33:3804056_G/C              C        NA           . chr33:3804056_G/C #>   chr33:3805103_A/C              C        NA           . chr33:3805103_A/C #>   chr33:3805111_G/T              T        NA           . chr33:3805111_G/T #>   chr33:3805659_T/C              C        NA           . chr33:3805659_T/C #>   chr33:3805709_C/G              G        NA           . chr33:3805709_C/G #>                 ...            ...       ...         ...               ... #>   chr33:7473031_T/C              C        NA           . chr33:7473031_T/C #>   chr33:7473583_G/A              A        NA           . chr33:7473583_G/A #>   chr33:7473834_G/T              T        NA           . chr33:7473834_G/T #>   chr33:7473857_T/C              C        NA           . chr33:7473857_T/C #>   chr33:7475206_A/C              C        NA           . chr33:7475206_A/C #>                         gene_id ranges_original #>                     <character>       <IRanges> #>   chr33:3804056_G/C   100498692 3808915-3808996 #>   chr33:3805103_A/C   100498692 3808915-3808996 #>   chr33:3805111_G/T   100498692 3808915-3808996 #>   chr33:3805659_T/C   100498692 3808915-3808996 #>   chr33:3805709_C/G   100498692 3808915-3808996 #>                 ...         ...             ... #>   chr33:7473031_T/C   100316005 7470778-7470842 #>   chr33:7473583_G/A   100316005 7470778-7470842 #>   chr33:7473834_G/T   100316005 7470778-7470842 #>   chr33:7473857_T/C   100316005 7470778-7470842 #>   chr33:7475206_A/C   100316005 7470778-7470842 #>   ------- #>   seqinfo: 1 sequence from galGal6 genome table(myprosnps$gene_id) #>  #> 100316005 100498692    408041    408042    693249  #>        11        15        12         7        15 median(table(prosnps$gene_id)) #> [1] 12.5 motifs <- subset(MotifDb, dataSource==\"jaspar2022\") motifs #> MotifDb object of length 1956 #> | Created from downloaded public sources, last update: 2022-Mar-04 #> | 1956 position frequency matrices from 1 source: #> |         jaspar2022: 1956 #> | 19 organism/s #> |           Hsapiens:  691 #> |          Athaliana:  568 #> |        Scerevisiae:  170 #> |      Dmelanogaster:  150 #> |                 NA:  144 #> |          Mmusculus:  143 #> |              other:   90 #> Mmusculus-jaspar2022-Arnt-MA0004.1  #> Mmusculus-jaspar2022-Ahr::Arnt-MA0006.1  #> Dmelanogaster-jaspar2022-br-MA0010.1  #> Dmelanogaster-jaspar2022-br-MA0011.1  #> Dmelanogaster-jaspar2022-br-MA0012.1  #> ... #> Athaliana-jaspar2022-HSFC1-MA1667.2  #> Athaliana-jaspar2022-NAC017-MA1674.2  #> Athaliana-jaspar2022-NAC062-MA1676.2  #> Athaliana-jaspar2022-NTL8-MA1678.2  #> Athaliana-jaspar2022-ERF11-MA1001.3 mbresGR <- motifbreakR(myprosnps, pwmList=motifs) mballGR <- motifbreakR(prosnps, pwmList=motifs) mbres <- mbresGR |> mb_to_tibble() mball <- mballGR |> mb_to_tibble() mbres #> # A tibble: 1,335 × 10 #>    gene_id   SNP_id      tf    pctRef pctAlt scoreRef scoreAlt effect alleleDiff #>    <chr>     <chr>       <chr>  <dbl>  <dbl>    <dbl>    <dbl> <chr>       <dbl> #>  1 100316005 chr33:7472… ACE2   0.986  0.783     4.85     3.87 strong     -0.980 #>  2 100316005 chr33:7472… ADR1   0.759  0.917     3.34     4.01 weak        0.673 #>  3 100316005 chr33:7471… AFT2   0.964  0.878     5.50     5.02 weak       -0.480 #>  4 100316005 chr33:7472… AFT2   0.902  0.740     5.15     4.24 strong     -0.911 #>  5 100316005 chr33:7473… AFT2   0.879  0.705     5.02     4.04 strong     -0.980 #>  6 100316005 chr33:7472… AGL42  0.859  0.693     5.14     4.15 strong     -0.986 #>  7 100316005 chr33:7471… AGL55  0.695  0.861     3.97     4.91 strong      0.939 #>  8 100316005 chr33:7472… ALX3   0.972  0.776     4.23     3.43 strong     -0.806 #>  9 100316005 chr33:7473… ALX3   0.919  0.773     4.02     3.42 weak       -0.600 #> 10 100316005 chr33:7473… ARG80  0.731  0.961     3.16     4.15 strong      0.993 #> # ℹ 1,325 more rows #> # ℹ 1 more variable: alleleEffectSize <dbl> mball #> # A tibble: 12,689 × 10 #>    gene_id   SNP_id      tf    pctRef pctAlt scoreRef scoreAlt effect alleleDiff #>    <chr>     <chr>       <chr>  <dbl>  <dbl>    <dbl>    <dbl> <chr>       <dbl> #>  1 100315917 chr33:5706… ARG80  0.979  0.749     4.23     3.24 strong     -0.993 #>  2 100315917 chr33:5706… ARG81  0.991  0.825     5.89     4.90 strong     -0.982 #>  3 100315917 chr33:5703… ARGFX  0.781  0.889     5.06     5.74 weak        0.677 #>  4 100315917 chr33:5706… ARR1   0.634  0.880     2.53     3.42 strong      0.892 #>  5 100315917 chr33:5707… AT1G…  0.882  0.779     7.60     6.73 strong     -0.861 #>  6 100315917 chr33:5704… AT3G…  0.784  0.892     5.13     5.79 weak        0.666 #>  7 100315917 chr33:5706… ATHB…  0.781  0.890     4.12     4.67 weak        0.552 #>  8 100315917 chr33:5706… ATHB…  0.721  0.868     4.98     5.98 strong      0.993 #>  9 100315917 chr33:5706… ATHB…  0.813  0.966     5.32     6.32 strong      0.998 #> 10 100315917 chr33:5706… ATHB…  0.778  0.931     4.98     5.94 strong      0.963 #> # ℹ 12,679 more rows #> # ℹ 1 more variable: alleleEffectSize <dbl> # Save the data so you don't have to run this long-running analysis again saveRDS(mball, file=\"genome-wide-motifbreakr-results.rds\") # Read them back in from a file mball <- readRDS(file=\"genome-wide-motifbreakr-results.rds\")"},{"path":[]},{"path":"https://colossal-compsci.github.io/tfboot/articles/intro.html","id":"motivation-1","dir":"Articles","previous_headings":"Assessing statistical signficance","what":"Motivation","title":"Statistical analysis of TFBS disruption with tfboot","text":"example set five genes. ’ve run motifbreakR SNPs 5kb upstream region genes, want ask questions “statistically SNPs promoters five genes random selection five genes?” “SNPs promoters five genes statistically enriched disrupt TFBS, randomly selected genes?” tfboot package can help answer questions. initially ran motifbreakR set five genes interest. address kinds questions , go back set genes (, just limited chromosome 33 demonstration purposes), randomly draw 1000 sets 5 genes, run motifbreakR SNPs promoters, compare stats empirical null distribution obtain p-value. However, running motifbreakR five genes takes time. Imagine gene set 300 genes. need run motifbreakR 300,000 times generate null distribution. , multiple gene sets, e.g., one 100 genes, another 500 genes, another 400 genes, need run motifbreakR 1,000,000 times generate null distrubitions 1,000 bootstraps intervals. Instead, can generate motifbreakR results genes, , save results file, ’ve done . , need compute bootstrap sampling create empirical null distribution, bootstrap precomputed results, rather bootstrapping motifbreakR procedure .","code":""},{"path":"https://colossal-compsci.github.io/tfboot/articles/intro.html","id":"demonstration","dir":"Articles","previous_headings":"Assessing statistical signficance","what":"Demonstration","title":"Statistical analysis of TFBS disruption with tfboot","text":"Let’s look motifbreakR results genes interest: Now, let’s review motifbreakR genes interest tfboot function mb_summarize summarize results motifbreakR analysis single-row table. See help ?mb_summarize details. returns table following columns: ngenes: number genes SNP set. nsnps: number SNPs total. nstrong: number SNPs “strong” effect. alleleDiffAbsMean mean absolute values alleleDiff scores. alleleDiffAbsSum sum absolute values alleleDiff scores. alleleEffectSizeAbsMean mean absolute values alleleEffectSize scores. alleleEffectSizeAbsSum sum absolute values alleleEffectSize scores. Let’s run set genes interest: , numbers compare , example, number SNPs, number strong effects, average absolute allele difference, average absolute effect size, set SNPs promoters randomly chosen sample number genes? can use mb_bootstrap function generate empirical null distribution given precomputed set motifbreakR universe genes. function takes motifbreakR results tibble (mb_to_tibble), draws boots random samples ngenes genes, returns list (1) wide tibble results bootstrap, (2) another tibble distribution metric column. set random number generator reproducibility, limit number bootstrap resamples speed. Finally, can use mb_bootstats() function take summary genes interest (output mb_summary()) bootstrapped empirical null distribution (mb_bootstrap() run motifbreakR results genes), compare critical values (mbsmry ) empirical null distribution (called mbboot ). can also visualize graphically plot_bootstats() function, takes results mb_bootstats() input.  results see meaningful statistical enrichment TFBS-disrupting SNPs set genes compared randomly selected genes (expected – five genes randomly chosen).","code":"# Look at the data mbres #> # A tibble: 1,335 × 10 #>    gene_id   SNP_id      tf    pctRef pctAlt scoreRef scoreAlt effect alleleDiff #>    <chr>     <chr>       <chr>  <dbl>  <dbl>    <dbl>    <dbl> <chr>       <dbl> #>  1 100316005 chr33:7472… ACE2   0.986  0.783     4.85     3.87 strong     -0.980 #>  2 100316005 chr33:7472… ADR1   0.759  0.917     3.34     4.01 weak        0.673 #>  3 100316005 chr33:7471… AFT2   0.964  0.878     5.50     5.02 weak       -0.480 #>  4 100316005 chr33:7472… AFT2   0.902  0.740     5.15     4.24 strong     -0.911 #>  5 100316005 chr33:7473… AFT2   0.879  0.705     5.02     4.04 strong     -0.980 #>  6 100316005 chr33:7472… AGL42  0.859  0.693     5.14     4.15 strong     -0.986 #>  7 100316005 chr33:7471… AGL55  0.695  0.861     3.97     4.91 strong      0.939 #>  8 100316005 chr33:7472… ALX3   0.972  0.776     4.23     3.43 strong     -0.806 #>  9 100316005 chr33:7473… ALX3   0.919  0.773     4.02     3.42 weak       -0.600 #> 10 100316005 chr33:7473… ARG80  0.731  0.961     3.16     4.15 strong      0.993 #> # ℹ 1,325 more rows #> # ℹ 1 more variable: alleleEffectSize <dbl> # How many genes length(unique(mbres$gene_id)) #> [1] 5 # How many TFBS are disrupted for each gene? table(mbres$gene_id) #>  #> 100316005 100498692    408041    408042    693249  #>       436       206       361       131       201 # How many \"strong\" in each gene? table(mbres$gene_id, mbres$effect) #>             #>             strong weak #>   100316005    326  110 #>   100498692    152   54 #>   408041       225  136 #>   408042       101   30 #>   693249       146   55 # Look at the data (note the number of rows) mball #> # A tibble: 12,689 × 10 #>    gene_id   SNP_id      tf    pctRef pctAlt scoreRef scoreAlt effect alleleDiff #>    <chr>     <chr>       <chr>  <dbl>  <dbl>    <dbl>    <dbl> <chr>       <dbl> #>  1 100315917 chr33:5706… ARG80  0.979  0.749     4.23     3.24 strong     -0.993 #>  2 100315917 chr33:5706… ARG81  0.991  0.825     5.89     4.90 strong     -0.982 #>  3 100315917 chr33:5703… ARGFX  0.781  0.889     5.06     5.74 weak        0.677 #>  4 100315917 chr33:5706… ARR1   0.634  0.880     2.53     3.42 strong      0.892 #>  5 100315917 chr33:5707… AT1G…  0.882  0.779     7.60     6.73 strong     -0.861 #>  6 100315917 chr33:5704… AT3G…  0.784  0.892     5.13     5.79 weak        0.666 #>  7 100315917 chr33:5706… ATHB…  0.781  0.890     4.12     4.67 weak        0.552 #>  8 100315917 chr33:5706… ATHB…  0.721  0.868     4.98     5.98 strong      0.993 #>  9 100315917 chr33:5706… ATHB…  0.813  0.966     5.32     6.32 strong      0.998 #> 10 100315917 chr33:5706… ATHB…  0.778  0.931     4.98     5.94 strong      0.963 #> # ℹ 12,679 more rows #> # ℹ 1 more variable: alleleEffectSize <dbl> # How many genes length(unique(mball$gene_id)) #> [1] 56 # How many TFBS are disrupted for each gene? Just show the top 5 table(mball$gene_id) |>    sort(decreasing = TRUE) |>    head(n=5) #>  #> 100316005 102466833    408041    429501 100859133  #>       436       427       361       360       343 mbsmry <- mb_summarize(mbres) mbsmry #> # A tibble: 1 × 7 #>   ngenes nsnps nstrong alleleDiffAbsMean alleleDiffAbsSum alleleEffectSizeAbsM…¹ #>    <int> <int>   <int>             <dbl>            <dbl>                  <dbl> #> 1      5  1335     950             0.798            1066.                  0.155 #> # ℹ abbreviated name: ¹​alleleEffectSizeAbsMean #> # ℹ 1 more variable: alleleEffectSizeAbsSum <dbl> set.seed(42) mbboot <- mb_bootstrap(mball, ngenes=5, boots=250) mbboot$bootwide #> # A tibble: 250 × 9 #>     boot genes           ngenes nsnps nstrong alleleDiffAbsMean alleleDiffAbsSum #>    <int> <chr>            <int> <int>   <int>             <dbl>            <dbl> #>  1     1 431304;426469;…      5  1062     750             0.797             847. #>  2     2 426183;395959;…      5  1244     914             0.808            1005. #>  3     3 102465361;4261…      5   886     655             0.812             720. #>  4     4 396007;407779;…      5  1514    1139             0.815            1234. #>  5     5 426883;396544;…      5   925     623             0.787             728. #>  6     6 425059;429035;…      5  1350    1026             0.821            1109. #>  7     7 408042;426880;…      5   823     627             0.823             677. #>  8     8 396170;425058;…      5  1262     910             0.805            1016. #>  9     9 102466833;4261…      5  1263     963             0.822            1038. #> 10    10 429035;408042;…      5  1289     987             0.823            1061. #> # ℹ 240 more rows #> # ℹ 2 more variables: alleleEffectSizeAbsMean <dbl>, #> #   alleleEffectSizeAbsSum <dbl> mbboot$bootdist #> # A tibble: 6 × 2 #>   metric                  bootdist    #>   <chr>                   <list>      #> 1 alleleDiffAbsMean       <dbl [250]> #> 2 alleleDiffAbsSum        <dbl [250]> #> 3 alleleEffectSizeAbsMean <dbl [250]> #> 4 alleleEffectSizeAbsSum  <dbl [250]> #> 5 nsnps                   <dbl [250]> #> 6 nstrong                 <dbl [250]> bootstats <- mb_bootstats(mbsmry = mbsmry, mbboot = mbboot) bootstats #> # A tibble: 6 × 5 #>   metric                      stat bootdist     bootmax     p #>   <chr>                      <dbl> <list>         <dbl> <dbl> #> 1 nsnps                   1335     <dbl [250]> 1597     0.136 #> 2 nstrong                  950     <dbl [250]> 1210     0.188 #> 3 alleleDiffAbsMean          0.798 <dbl [250]>    0.831 0.836 #> 4 alleleDiffAbsSum        1066.    <dbl [250]> 1304.    0.148 #> 5 alleleEffectSizeAbsMean    0.155 <dbl [250]>    0.163 0.456 #> 6 alleleEffectSizeAbsSum   206.    <dbl [250]>  251.    0.128 plot_bootstats(bootstats)"},{"path":"https://colossal-compsci.github.io/tfboot/articles/intro.html","id":"caveats","dir":"Articles","previous_headings":"Assessing statistical signficance","what":"Caveats","title":"Statistical analysis of TFBS disruption with tfboot","text":"set motifbreakR results genes must recomputed new sample. vignette demonstrates precompute motifbreakR results universe genes. can use precomputed set quickly bootstrap empirical null distribution set k randomly selected genes. However, background set unique sample. sample different set SNPs, precomputing procedure computes motifbreakR results SNPs upstream regions genes. Similarly, upstream region changes default 5,000 bp, results genes need recomputed . SNP density matters. Promoter regions larger number SNPs going larger values sum absolute values allele difference effect sizes. affect mean metrics. Genes, transcripts. vignette demonstrates running motifbreakR SNPs 5kb upstream regions defined genes (see help ?get_upstream ?get_upstream_snps ?GenomicFeatures::genes). using 5’ transcript transcription start site, looking 5kb upstream position. consider alternative transcription start sites. development required contend multiple sets TFBS motif disruption scores gene transcripts used.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/articles/intro.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"Statistical analysis of TFBS disruption with tfboot","text":"","code":"#> R version 4.3.1 (2023-06-16) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] grid      stats4    stats     graphics  grDevices utils     datasets  #> [8] methods   base      #>  #> other attached packages: #>  [1] tfboot_1.0.0                             #>  [2] motifbreakR_2.14.2                       #>  [3] MotifDb_1.42.0                           #>  [4] plyranges_1.20.0                         #>  [5] org.Gg.eg.db_3.17.0                      #>  [6] TxDb.Ggallus.UCSC.galGal6.refGene_3.10.0 #>  [7] GenomicFeatures_1.52.1                   #>  [8] AnnotationDbi_1.62.2                     #>  [9] Biobase_2.60.0                           #> [10] BSgenome.Ggallus.UCSC.galGal6_1.4.2      #> [11] BSgenome_1.68.0                          #> [12] rtracklayer_1.60.0                       #> [13] Biostrings_2.68.1                        #> [14] XVector_0.40.0                           #> [15] GenomicRanges_1.52.0                     #> [16] GenomeInfoDb_1.36.1                      #> [17] IRanges_2.34.1                           #> [18] S4Vectors_0.38.1                         #> [19] BiocGenerics_0.46.0                      #>  #> loaded via a namespace (and not attached): #>   [1] BiocIO_1.10.0               bitops_1.0-7                #>   [3] filelock_1.0.2              R.oo_1.25.0                 #>   [5] tibble_3.2.1                XML_3.99-0.14               #>   [7] rpart_4.1.19                DirichletMultinomial_1.42.0 #>   [9] lifecycle_1.0.3             rprojroot_2.0.3             #>  [11] lattice_0.21-8              ensembldb_2.24.0            #>  [13] MASS_7.3-60                 backports_1.4.1             #>  [15] magrittr_2.0.3              Hmisc_5.1-0                 #>  [17] sass_0.4.6                  rmarkdown_2.23              #>  [19] jquerylib_0.1.4             yaml_2.3.7                  #>  [21] Gviz_1.44.0                 DBI_1.1.3                   #>  [23] CNEr_1.36.0                 RColorBrewer_1.1-3          #>  [25] ade4_1.7-22                 zlibbioc_1.46.0             #>  [27] purrr_1.0.1                 R.utils_2.12.2              #>  [29] AnnotationFilter_1.24.0     biovizBase_1.48.0           #>  [31] RCurl_1.98-1.12             nnet_7.3-19                 #>  [33] pracma_2.4.2                VariantAnnotation_1.46.0    #>  [35] rappdirs_0.3.3              GenomeInfoDbData_1.2.10     #>  [37] seqLogo_1.66.0              annotate_1.78.0             #>  [39] pkgdown_2.0.7               codetools_0.2-19            #>  [41] DelayedArray_0.26.6         xml2_1.3.5                  #>  [43] tidyselect_1.2.0            farver_2.1.1                #>  [45] matrixStats_1.0.0           BiocFileCache_2.8.0         #>  [47] base64enc_0.1-3             GenomicAlignments_1.36.0    #>  [49] jsonlite_1.8.7              motifStack_1.44.1           #>  [51] Formula_1.2-5               systemfonts_1.0.4           #>  [53] tools_4.3.1                 progress_1.2.2              #>  [55] ragg_1.2.5                  TFMPvalue_0.0.9             #>  [57] Rcpp_1.0.11                 glue_1.6.2                  #>  [59] gridExtra_2.3               xfun_0.39                   #>  [61] MatrixGenerics_1.12.2       dplyr_1.1.2                 #>  [63] withr_2.5.0                 fastmap_1.1.1               #>  [65] latticeExtra_0.6-30         fansi_1.0.4                 #>  [67] caTools_1.18.2              digest_0.6.33               #>  [69] R6_2.5.1                    textshaping_0.3.6           #>  [71] colorspace_2.1-0            GO.db_3.17.0                #>  [73] gtools_3.9.4                poweRlaw_0.70.6             #>  [75] jpeg_0.1-10                 dichromat_2.0-0.1           #>  [77] biomaRt_2.56.1              RSQLite_2.3.1               #>  [79] R.methodsS3_1.8.2           tidyr_1.3.0                 #>  [81] utf8_1.2.3                  generics_0.1.3              #>  [83] data.table_1.14.8           prettyunits_1.1.1           #>  [85] httr_1.4.6                  htmlwidgets_1.6.2           #>  [87] S4Arrays_1.0.4              TFBSTools_1.38.0            #>  [89] pkgconfig_2.0.3             gtable_0.3.3                #>  [91] blob_1.2.4                  htmltools_0.5.5             #>  [93] ProtGenerics_1.32.0         scales_1.2.1                #>  [95] png_0.1-8                   knitr_1.43                  #>  [97] rstudioapi_0.15.0           tzdb_0.4.0                  #>  [99] reshape2_1.4.4              rjson_0.2.21                #> [101] checkmate_2.2.0             curl_5.0.1                  #> [103] cachem_1.0.8                stringr_1.5.0               #> [105] parallel_4.3.1              foreign_0.8-84              #> [107] restfulr_0.0.15             desc_1.4.2                  #> [109] pillar_1.9.0                vctrs_0.6.3                 #> [111] dbplyr_2.3.3                xtable_1.8-4                #> [113] cluster_2.1.4               htmlTable_2.4.1             #> [115] evaluate_0.21               readr_2.1.4                 #> [117] cli_3.6.1                   compiler_4.3.1              #> [119] Rsamtools_2.16.0            rlang_1.1.1                 #> [121] crayon_1.5.2                labeling_0.4.2              #> [123] interp_1.1-4                plyr_1.8.8                  #> [125] fs_1.6.2                    stringi_1.7.12              #> [127] deldir_1.0-9                BiocParallel_1.34.2         #> [129] munsell_0.5.0               lazyeval_0.2.2              #> [131] Matrix_1.5-4.1              hms_1.1.3                   #> [133] bit64_4.0.5                 ggplot2_3.4.2               #> [135] KEGGREST_1.40.0             highr_0.10                  #> [137] SummarizedExperiment_1.30.2 memoise_2.0.1               #> [139] bslib_0.5.0                 bit_4.0.5                   #> [141] splitstackshape_1.4.8"},{"path":"https://colossal-compsci.github.io/tfboot/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stephen Turner. Author, maintainer. Colossal Biosciences. Copyright holder.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Turner S (2023). tfboot: Bootstrapping statistical analysis TFBS-disrupting SNPs. https://github.com/colossal-compsci/tfboot, https://colossal-compsci.github.io/tfboot/.","code":"@Manual{,   title = {tfboot: Bootstrapping and statistical analysis for TFBS-disrupting SNPs},   author = {Stephen Turner},   year = {2023},   note = {https://github.com/colossal-compsci/tfboot, https://colossal-compsci.github.io/tfboot/}, }"},{"path":"https://colossal-compsci.github.io/tfboot/index.html","id":"tfboot-","dir":"","previous_headings":"","what":"Bootstrapping and statistical analysis for TFBS-disrupting SNPs","title":"Bootstrapping and statistical analysis for TFBS-disrupting SNPs","text":"goal tfboot facilitate statistical analysis SNPs disrupting transcription factor binding sites (TFBS) using bootstrapping resampling create empirical null distributions.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bootstrapping and statistical analysis for TFBS-disrupting SNPs","text":"can install tfboot GitHub code . install tfboot: install required suggested packages, including motifbreakR needed build vignette: See pkgdown documentation introductory vignette function documentation.","code":"# install.packages(\"devtools\") devtools::install_github(\"colossal-compsci/tfboot\") # install.packages(\"devtools\") devtools::install_github(\"colossal-compsci/tfboot\",                          build_vignettes = TRUE,                           dependencies = c(\"Imports\", \"Suggests\"))"},{"path":"https://colossal-compsci.github.io/tfboot/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Bootstrapping and statistical analysis for TFBS-disrupting SNPs","text":"Let’s use example vignette. First, let’s load pre-baked motifbreakR results. mbres set motifbreakR results run SNPs 5kb promoter region random selection 5 genes. mball precomputed set motifbreakR results run SNPs promoter region genes. Summarize motifbreakR results 5 genes interest. shows us actual values number SNPs upstream regions genes, summary statistics allele differences, effect sizes, etc. See vignette ?mb_summarize details. Bootstrap resample motifbreakR results genes. Resample sets 5 genes 250 times. Compare values five genes interest empirical null distribution bootstrap resampling. Visualize results:  See vignette(\"intro\", package=\"tfboot\") articles pkgdown documentation website .","code":"library(tfboot) mbres <- vignettedata$mbres mbres #> # A tibble: 1,335 × 10 #>    gene_id   SNP_id            tf    pctRef pctAlt scoreRef scoreAlt effect alleleDiff alleleEffectSize #>    <chr>     <chr>             <chr>  <dbl>  <dbl>    <dbl>    <dbl> <chr>       <dbl>            <dbl> #>  1 100316005 chr33:7472152_G/C ACE2   0.986  0.783     4.85     3.87 strong     -0.980          -0.199  #>  2 100316005 chr33:7472176_T/G ADR1   0.759  0.917     3.34     4.01 weak        0.673           0.154  #>  3 100316005 chr33:7471139_A/C AFT2   0.964  0.878     5.50     5.02 weak       -0.480          -0.0843 #>  4 100316005 chr33:7472176_T/G AFT2   0.902  0.740     5.15     4.24 strong     -0.911          -0.160  #>  5 100316005 chr33:7473834_G/T AFT2   0.879  0.705     5.02     4.04 strong     -0.980          -0.172  #>  6 100316005 chr33:7472152_G/C AGL42  0.859  0.693     5.14     4.15 strong     -0.986          -0.165  #>  7 100316005 chr33:7471139_A/C AGL55  0.695  0.861     3.97     4.91 strong      0.939           0.165  #>  8 100316005 chr33:7472830_A/T ALX3   0.972  0.776     4.23     3.43 strong     -0.806          -0.185  #>  9 100316005 chr33:7473857_T/C ALX3   0.919  0.773     4.02     3.42 weak       -0.600          -0.138  #> 10 100316005 chr33:7473583_G/A ARG80  0.731  0.961     3.16     4.15 strong      0.993           0.230  #> # ℹ 1,325 more rows mball <- vignettedata$mball mball #> # A tibble: 12,689 × 10 #>    gene_id   SNP_id            tf        pctRef pctAlt scoreRef scoreAlt effect alleleDiff alleleEffectSize #>    <chr>     <chr>             <chr>      <dbl>  <dbl>    <dbl>    <dbl> <chr>       <dbl>            <dbl> #>  1 100315917 chr33:5706617_C/T ARG80      0.979  0.749     4.23     3.24 strong     -0.993           -0.230 #>  2 100315917 chr33:5706617_C/T ARG81      0.991  0.825     5.89     4.90 strong     -0.982           -0.165 #>  3 100315917 chr33:5703167_G/T ARGFX      0.781  0.889     5.06     5.74 weak        0.677            0.105 #>  4 100315917 chr33:5706617_C/T ARR1       0.634  0.880     2.53     3.42 strong      0.892            0.231 #>  5 100315917 chr33:5707492_C/T AT1G19040  0.882  0.779     7.60     6.73 strong     -0.861           -0.100 #>  6 100315917 chr33:5704406_C/G AT3G46070  0.784  0.892     5.13     5.79 weak        0.666            0.103 #>  7 100315917 chr33:5706617_C/T ATHB-12    0.781  0.890     4.12     4.67 weak        0.552            0.106 #>  8 100315917 chr33:5706617_C/T ATHB-13    0.721  0.868     4.98     5.98 strong      0.993            0.145 #>  9 100315917 chr33:5706617_C/T ATHB-16    0.813  0.966     5.32     6.32 strong      0.998            0.153 #> 10 100315917 chr33:5706617_C/T ATHB-4     0.778  0.931     4.98     5.94 strong      0.963            0.151 #> # ℹ 12,679 more rows mbsmry <- mb_summarize(mbres) mbsmry #> # A tibble: 1 × 7 #>   ngenes nsnps nstrong alleleDiffAbsMean alleleDiffAbsSum alleleEffectSizeAbsMean alleleEffectSizeAbsSum #>    <int> <int>   <int>             <dbl>            <dbl>                   <dbl>                  <dbl> #> 1      5  1335     950             0.798            1066.                   0.155                   206. set.seed(42) mbboot <- mb_bootstrap(mball, ngenes=5, boots = 250) mbboot$bootwide #> # A tibble: 250 × 9 #>     boot genes                                    ngenes nsnps nstrong alleleDiffAbsMean alleleDiffAbsSum alleleEffectSizeAbsMean alleleEffectSizeAbsSum #>    <int> <chr>                                     <int> <int>   <int>             <dbl>            <dbl>                   <dbl>                  <dbl> #>  1     1 431304;426469;100315917;396544;374124         5  1062     750             0.797             847.                   0.155                   164. #>  2     2 426183;395959;431304;429501;396170            5  1244     914             0.808            1005.                   0.157                   195. #>  3     3 102465361;426183;396544;426469;429172         5   886     655             0.812             720.                   0.149                   132. #>  4     4 396007;407779;693245;429501;100498692         5  1514    1139             0.815            1234.                   0.153                   232. #>  5     5 426883;396544;408041;426183;426469            5   925     623             0.787             728.                   0.147                   136. #>  6     6 425059;429035;100529062;396007;425613         5  1350    1026             0.821            1109.                   0.155                   209. #>  7     7 408042;426880;100498692;425499;426885         5   823     627             0.823             677.                   0.157                   129. #>  8     8 396170;425058;426886;395587;396045            5  1262     910             0.805            1016.                   0.147                   185. #>  9     9 102466833;426183;100529061;396045;395959      5  1263     963             0.822            1038.                   0.153                   193. #> 10    10 429035;408042;100529062;100529061;425613      5  1289     987             0.823            1061.                   0.154                   198. #> # ℹ 240 more rows mbboot$bootdist #> # A tibble: 6 × 2 #>   metric                  bootdist    #>   <chr>                   <list>      #> 1 alleleDiffAbsMean       <dbl [250]> #> 2 alleleDiffAbsSum        <dbl [250]> #> 3 alleleEffectSizeAbsMean <dbl [250]> #> 4 alleleEffectSizeAbsSum  <dbl [250]> #> 5 nsnps                   <dbl [250]> #> 6 nstrong                 <dbl [250]> bootstats <- mb_bootstats(mbsmry, mbboot) bootstats #> # A tibble: 6 × 5 #>   metric                      stat bootdist     bootmax     p #>   <chr>                      <dbl> <list>         <dbl> <dbl> #> 1 nsnps                   1335     <dbl [250]> 1597     0.136 #> 2 nstrong                  950     <dbl [250]> 1210     0.188 #> 3 alleleDiffAbsMean          0.798 <dbl [250]>    0.831 0.836 #> 4 alleleDiffAbsSum        1066.    <dbl [250]> 1304.    0.148 #> 5 alleleEffectSizeAbsMean    0.155 <dbl [250]>    0.163 0.456 #> 6 alleleEffectSizeAbsSum   206.    <dbl [250]>  251.    0.128 plot_bootstats(bootstats)"},{"path":"https://colossal-compsci.github.io/tfboot/reference/get_upstream.html","id":null,"dir":"Reference","previous_headings":"","what":"Get upstream intervals — get_upstream","title":"Get upstream intervals — get_upstream","text":"Get upstream intervals GRanges object.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/get_upstream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get upstream intervals — get_upstream","text":"","code":"get_upstream(gr, width = 5000L)"},{"path":"https://colossal-compsci.github.io/tfboot/reference/get_upstream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get upstream intervals — get_upstream","text":"gr GenomicRanges object. width Width upstream interval. Default 5000.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/get_upstream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get upstream intervals — get_upstream","text":"GRanges object intervals width specified width upstream start position gr input GRanges object.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/get_upstream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get upstream intervals — get_upstream","text":"","code":"gr <- data.frame(seqnames = \"chr1\",                  strand = c(\"+\", \"-\"),                  start = c(42001, 67001),                  width = c(1000, 1000),                  gene = c(\"A\", \"B\")) |>   plyranges::as_granges() gr #> GRanges object with 2 ranges and 1 metadata column: #>       seqnames      ranges strand |        gene #>          <Rle>   <IRanges>  <Rle> | <character> #>   [1]     chr1 42001-43000      + |           A #>   [2]     chr1 67001-68000      - |           B #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths get_upstream(gr) #> GRanges object with 2 ranges and 2 metadata columns: #>       seqnames      ranges strand |        gene ranges_original #>          <Rle>   <IRanges>  <Rle> | <character>       <IRanges> #>   [1]     chr1 37001-42000      + |           A     42001-43000 #>   [2]     chr1 67999-72998      - |           B     67001-68000 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://colossal-compsci.github.io/tfboot/reference/get_upstream_snps.html","id":null,"dir":"Reference","previous_headings":"","what":"Get SNPs in upstream regions — get_upstream_snps","title":"Get SNPs in upstream regions — get_upstream_snps","text":"Get SNPs upstream gene regions. Input SNPs read read_vcf appropriate TxDb object.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/get_upstream_snps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get SNPs in upstream regions — get_upstream_snps","text":"","code":"get_upstream_snps(snps, txdb, level = \"genes\", ...)"},{"path":"https://colossal-compsci.github.io/tfboot/reference/get_upstream_snps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get SNPs in upstream regions — get_upstream_snps","text":"snps SNPs read read_vcf. txdb GenomicFeatures::TxDb object transcript annotations organism interest. Must match organism specified bsgenome argument read_vcf. level Currently \"genes\" \"transcripts\" supported, run GenomicFeatures::genes GenomicFeatures::transcripts, respectively. ... Additional arguments passed get_upstream (e.g., width=).","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/get_upstream_snps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get SNPs in upstream regions — get_upstream_snps","text":"GRanges object containing SNPs regions upstream intervals specified TxDb. See get_upstream.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/get_upstream_snps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get SNPs in upstream regions — get_upstream_snps","text":"","code":"if (FALSE) { library(BSgenome.Ggallus.UCSC.galGal6) library(TxDb.Ggallus.UCSC.galGal6.refGene) bs <- BSgenome.Ggallus.UCSC.galGal6 tx <- TxDb.Ggallus.UCSC.galGal6.refGene vcf_file <- system.file(\"extdata\", \"galGal6-chr33.vcf.gz\", package=\"tfboot\", mustWork = TRUE) snps <- read_vcf(vcf_file, BSgenome.Ggallus.UCSC.galGal6) upstreamsnps <- get_upstream_snps(snps=snps, txdb=tx, level=\"genes\") upstreamsnps }"},{"path":"https://colossal-compsci.github.io/tfboot/reference/mb_bootstats.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap statistics — mb_bootstats","title":"Bootstrap statistics — mb_bootstats","text":"Get statistics (p-values) gene set's motifbreakR results compared bootstrapped empirical null distribution.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/mb_bootstats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap statistics — mb_bootstats","text":"","code":"mb_bootstats(mbsmry, mbboot)"},{"path":"https://colossal-compsci.github.io/tfboot/reference/mb_bootstats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap statistics — mb_bootstats","text":"mbsmry Results running mb_summarize motifbreakR results gene set interest. mbboot Results running mb_bootstrap full background genes. Typically performed , results read file.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/mb_bootstats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap statistics — mb_bootstats","text":"tibble metric bootstrap resampling (see mb_summarize), p-value comparing actual value gene set (stat) empirical null distribution (bootdist).","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/mb_bootstats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap statistics — mb_bootstats","text":"","code":"data(vignettedata) mbres <- vignettedata$mbres mball <- vignettedata$mball mbsmry <- mb_summarize(mbres) mbsmry #> # A tibble: 1 × 7 #>   ngenes nsnps nstrong alleleDiffAbsMean alleleDiffAbsSum alleleEffectSizeAbsM…¹ #>    <int> <int>   <int>             <dbl>            <dbl>                  <dbl> #> 1      5  1335     950             0.798            1066.                  0.155 #> # ℹ abbreviated name: ¹​alleleEffectSizeAbsMean #> # ℹ 1 more variable: alleleEffectSizeAbsSum <dbl> set.seed(42) mbboot <- mb_bootstrap(mball, ngenes=5, boots = 100) mbboot #> $bootwide #> # A tibble: 100 × 9 #>     boot genes           ngenes nsnps nstrong alleleDiffAbsMean alleleDiffAbsSum #>    <int> <chr>            <int> <int>   <int>             <dbl>            <dbl> #>  1     1 431304;426469;…      5  1062     750             0.797             847. #>  2     2 426183;395959;…      5  1244     914             0.808            1005. #>  3     3 102465361;4261…      5   886     655             0.812             720. #>  4     4 396007;407779;…      5  1514    1139             0.815            1234. #>  5     5 426883;396544;…      5   925     623             0.787             728. #>  6     6 425059;429035;…      5  1350    1026             0.821            1109. #>  7     7 408042;426880;…      5   823     627             0.823             677. #>  8     8 396170;425058;…      5  1262     910             0.805            1016. #>  9     9 102466833;4261…      5  1263     963             0.822            1038. #> 10    10 429035;408042;…      5  1289     987             0.823            1061. #> # ℹ 90 more rows #> # ℹ 2 more variables: alleleEffectSizeAbsMean <dbl>, #> #   alleleEffectSizeAbsSum <dbl> #>  #> $bootdist #> # A tibble: 6 × 2 #>   metric                  bootdist    #>   <chr>                   <list>      #> 1 alleleDiffAbsMean       <dbl [100]> #> 2 alleleDiffAbsSum        <dbl [100]> #> 3 alleleEffectSizeAbsMean <dbl [100]> #> 4 alleleEffectSizeAbsSum  <dbl [100]> #> 5 nsnps                   <dbl [100]> #> 6 nstrong                 <dbl [100]> #>  mb_bootstats(mbsmry, mbboot) #> # A tibble: 6 × 5 #>   metric                      stat bootdist     bootmax     p #>   <chr>                      <dbl> <list>         <dbl> <dbl> #> 1 nsnps                   1335     <dbl [100]> 1514      0.12 #> 2 nstrong                  950     <dbl [100]> 1139      0.16 #> 3 alleleDiffAbsMean          0.798 <dbl [100]>    0.828  0.84 #> 4 alleleDiffAbsSum        1066.    <dbl [100]> 1234.     0.12 #> 5 alleleEffectSizeAbsMean    0.155 <dbl [100]>    0.163  0.47 #> 6 alleleEffectSizeAbsSum   206.    <dbl [100]>  238.     0.11"},{"path":"https://colossal-compsci.github.io/tfboot/reference/mb_bootstrap.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap motifbreakR results — mb_bootstrap","title":"Bootstrap motifbreakR results — mb_bootstrap","text":"Bootstrap motifbreakR results. Takes motifbreakR results tibble (mb_to_tibble), draws boots random samples ngenes genes, returns list (1) wide tibble results bootstrap, (2) another tibble distribution metric listcol. See examples.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/mb_bootstrap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap motifbreakR results — mb_bootstrap","text":"","code":"mb_bootstrap(mbtibble, ngenes, boots = 100, key_col = \"gene_id\")"},{"path":"https://colossal-compsci.github.io/tfboot/reference/mb_bootstrap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap motifbreakR results — mb_bootstrap","text":"mbtibble tibble motifbreakR results mb_to_tibble. ngenes number genes sample bootstrap resample. boots number bootstrap resamples. key_col name column used key txdb. Default gene_id. May transcript_id otherwise use different value level get_upstream_snps.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/mb_bootstrap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap motifbreakR results — mb_bootstrap","text":"list two tibbles. See description examples.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/mb_bootstrap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap motifbreakR results — mb_bootstrap","text":"Typically, want run function full set genes create empirical null distribution. run motifbreakR genes, save RData object, read bootstrap resampling. See vignettes.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/mb_bootstrap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap motifbreakR results — mb_bootstrap","text":"","code":"data(vignettedata) vignettedata$mball #> # A tibble: 12,689 × 10 #>    gene_id   SNP_id      tf    pctRef pctAlt scoreRef scoreAlt effect alleleDiff #>    <chr>     <chr>       <chr>  <dbl>  <dbl>    <dbl>    <dbl> <chr>       <dbl> #>  1 100315917 chr33:5706… ARG80  0.979  0.749     4.23     3.24 strong     -0.993 #>  2 100315917 chr33:5706… ARG81  0.991  0.825     5.89     4.90 strong     -0.982 #>  3 100315917 chr33:5703… ARGFX  0.781  0.889     5.06     5.74 weak        0.677 #>  4 100315917 chr33:5706… ARR1   0.634  0.880     2.53     3.42 strong      0.892 #>  5 100315917 chr33:5707… AT1G…  0.882  0.779     7.60     6.73 strong     -0.861 #>  6 100315917 chr33:5704… AT3G…  0.784  0.892     5.13     5.79 weak        0.666 #>  7 100315917 chr33:5706… ATHB…  0.781  0.890     4.12     4.67 weak        0.552 #>  8 100315917 chr33:5706… ATHB…  0.721  0.868     4.98     5.98 strong      0.993 #>  9 100315917 chr33:5706… ATHB…  0.813  0.966     5.32     6.32 strong      0.998 #> 10 100315917 chr33:5706… ATHB…  0.778  0.931     4.98     5.94 strong      0.963 #> # ℹ 12,679 more rows #> # ℹ 1 more variable: alleleEffectSize <dbl> mb_bootstrap(vignettedata$mball, ngenes=5, boots=5) #> $bootwide #> # A tibble: 5 × 9 #>    boot genes            ngenes nsnps nstrong alleleDiffAbsMean alleleDiffAbsSum #>   <int> <chr>             <int> <int>   <int>             <dbl>            <dbl> #> 1     1 374124;395303;4…      5   986     687             0.796             784. #> 2     2 429035;407779;3…      5  1178     915             0.831             979. #> 3     3 395772;429501;1…      5  1533    1131             0.806            1235. #> 4     4 374124;408041;3…      5  1370     978             0.802            1098. #> 5     5 395711;426887;7…      5   916     653             0.805             737. #> # ℹ 2 more variables: alleleEffectSizeAbsMean <dbl>, #> #   alleleEffectSizeAbsSum <dbl> #>  #> $bootdist #> # A tibble: 6 × 2 #>   metric                  bootdist  #>   <chr>                   <list>    #> 1 alleleDiffAbsMean       <dbl [5]> #> 2 alleleDiffAbsSum        <dbl [5]> #> 3 alleleEffectSizeAbsMean <dbl [5]> #> 4 alleleEffectSizeAbsSum  <dbl [5]> #> 5 nsnps                   <dbl [5]> #> 6 nstrong                 <dbl [5]> #>"},{"path":"https://colossal-compsci.github.io/tfboot/reference/mb_summarize.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize motifbreakR results — mb_summarize","title":"Summarize motifbreakR results — mb_summarize","text":"Summarizes motifbreakR results tibble mb_to_tibble. See details.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/mb_summarize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize motifbreakR results — mb_summarize","text":"","code":"mb_summarize(mbtibble, key_col = \"gene_id\")"},{"path":"https://colossal-compsci.github.io/tfboot/reference/mb_summarize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize motifbreakR results — mb_summarize","text":"mbtibble motifbreakR results summarized mb_to_tibble. key_col name column used key txdb. Default gene_id. May transcript_id otherwise use different value level get_upstream_snps.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/mb_summarize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize motifbreakR results — mb_summarize","text":"tibble. See description.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/mb_summarize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize motifbreakR results — mb_summarize","text":"Summarizes motifbreakR results. Returns tibble columns indicating: ngenes: number genes SNP set. nsnps: number SNPs total. nstrong: number SNPs \"strong\" effect. alleleDiffAbsMean mean absolute values alleleDiff scores. alleleDiffAbsSum sum absolute values alleleDiff scores. alleleEffectSizeAbsMean mean absolute values alleleEffectSize scores. alleleEffectSizeAbsSum sum absolute values alleleEffectSize scores.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/mb_summarize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize motifbreakR results — mb_summarize","text":"","code":"data(vignettedata) vignettedata$mbres #> # A tibble: 1,335 × 10 #>    gene_id   SNP_id      tf    pctRef pctAlt scoreRef scoreAlt effect alleleDiff #>    <chr>     <chr>       <chr>  <dbl>  <dbl>    <dbl>    <dbl> <chr>       <dbl> #>  1 100316005 chr33:7472… ACE2   0.986  0.783     4.85     3.87 strong     -0.980 #>  2 100316005 chr33:7472… ADR1   0.759  0.917     3.34     4.01 weak        0.673 #>  3 100316005 chr33:7471… AFT2   0.964  0.878     5.50     5.02 weak       -0.480 #>  4 100316005 chr33:7472… AFT2   0.902  0.740     5.15     4.24 strong     -0.911 #>  5 100316005 chr33:7473… AFT2   0.879  0.705     5.02     4.04 strong     -0.980 #>  6 100316005 chr33:7472… AGL42  0.859  0.693     5.14     4.15 strong     -0.986 #>  7 100316005 chr33:7471… AGL55  0.695  0.861     3.97     4.91 strong      0.939 #>  8 100316005 chr33:7472… ALX3   0.972  0.776     4.23     3.43 strong     -0.806 #>  9 100316005 chr33:7473… ALX3   0.919  0.773     4.02     3.42 weak       -0.600 #> 10 100316005 chr33:7473… ARG80  0.731  0.961     3.16     4.15 strong      0.993 #> # ℹ 1,325 more rows #> # ℹ 1 more variable: alleleEffectSize <dbl> mb_summarize(vignettedata$mbres) #> # A tibble: 1 × 7 #>   ngenes nsnps nstrong alleleDiffAbsMean alleleDiffAbsSum alleleEffectSizeAbsM…¹ #>    <int> <int>   <int>             <dbl>            <dbl>                  <dbl> #> 1      5  1335     950             0.798            1066.                  0.155 #> # ℹ abbreviated name: ¹​alleleEffectSizeAbsMean #> # ℹ 1 more variable: alleleEffectSizeAbsSum <dbl>"},{"path":"https://colossal-compsci.github.io/tfboot/reference/mb_to_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"motifbreakR results to tibble — mb_to_tibble","title":"motifbreakR results to tibble — mb_to_tibble","text":"Make compact tibble select columns motifbreakR results GRanges objects.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/mb_to_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"motifbreakR results to tibble — mb_to_tibble","text":"","code":"mb_to_tibble(mb, key_col = \"gene_id\")"},{"path":"https://colossal-compsci.github.io/tfboot/reference/mb_to_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"motifbreakR results to tibble — mb_to_tibble","text":"mb motifbreakR results GRanges object. key_col name column used key txdb. Default gene_id. May transcript_id otherwise use different value level get_upstream_snps.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/mb_to_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"motifbreakR results to tibble — mb_to_tibble","text":"tibble containing key column (usually gene_id), select number columns needed downstream statistical analysis.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/mb_to_tibble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"motifbreakR results to tibble — mb_to_tibble","text":"good idea run motifbreakR background set genes save RData (.rds) file, read need .","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/plot_bootstats.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot bootstrap distributions — plot_bootstats","title":"Plot bootstrap distributions — plot_bootstats","text":"Plot bootstrap distributions motifbreakR results critical value highlighted vertical red line.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/plot_bootstats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot bootstrap distributions — plot_bootstats","text":"","code":"plot_bootstats(bootstats)"},{"path":"https://colossal-compsci.github.io/tfboot/reference/plot_bootstats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot bootstrap distributions — plot_bootstats","text":"bootstats Output running mb_bootstats results bootstrap resampling.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/plot_bootstats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot bootstrap distributions — plot_bootstats","text":"ggplot2 plot object. See description examples.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/plot_bootstats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot bootstrap distributions — plot_bootstats","text":"","code":"data(vignettedata) mbres <- vignettedata$mbres mball <- vignettedata$mball mbsmry <- mb_summarize(mbres) set.seed(42) mbboot <- mb_bootstrap(mball, ngenes=5, boots = 250) bootstats <- mb_bootstats(mbsmry, mbboot) plot_bootstats(bootstats)"},{"path":"https://colossal-compsci.github.io/tfboot/reference/read_vcf.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in SNPs from a VCF — read_vcf","title":"Read in SNPs from a VCF — read_vcf","text":"Helper function read SNP data VCF file.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/read_vcf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in SNPs from a VCF — read_vcf","text":"","code":"read_vcf(file, bsgenome)"},{"path":"https://colossal-compsci.github.io/tfboot/reference/read_vcf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in SNPs from a VCF — read_vcf","text":"file File path VCF file. See details. bsgenome object class BSgenome species interrogating; see BSgenome::available.genomes list species.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/read_vcf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in SNPs from a VCF — read_vcf","text":"GRanges object containing SNP_id, REF, ALT columns.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/read_vcf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read in SNPs from a VCF — read_vcf","text":"Note VCF must filtered contain variant sites (.e., 0/0), homozygous alt sites choose (0/1 1/1). can accomplished bcftools: # Filter variant sites: bcftools view -'GT=\"alt\"' ... # Filter homozygous alt sites: bcftools view -'GT=\"AA\"' ...","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/read_vcf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in SNPs from a VCF — read_vcf","text":"","code":"if (FALSE) { library(BSgenome.Ggallus.UCSC.galGal6) vcf_file <- system.file(\"extdata\", \"galGal6-chr33.vcf.gz\", package=\"tfboot\", mustWork = TRUE) snps <- read_vcf(vcf_file, BSgenome.Ggallus.UCSC.galGal6) snps }"},{"path":"https://colossal-compsci.github.io/tfboot/reference/split_gr_by_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Split GRanges by gene — split_gr_by_id","title":"Split GRanges by gene — split_gr_by_id","text":"Splits GRanges object GRangesList column (typically gene_id). function deprecated generally good use case. Originally written split GRanges object list iterate using furrr::future_map(), deprecated favor using built-parallelization motifbreakR.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/split_gr_by_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split GRanges by gene — split_gr_by_id","text":"","code":"split_gr_by_id(gr, key_col = \"gene_id\")"},{"path":"https://colossal-compsci.github.io/tfboot/reference/split_gr_by_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split GRanges by gene — split_gr_by_id","text":"gr GRanges object returned get_upstream_snps. key_col name column gr split (default gene_id).","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/split_gr_by_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split GRanges by gene — split_gr_by_id","text":"list genomic ranges split split_col.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/split_gr_by_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split GRanges by gene — split_gr_by_id","text":"","code":"if (FALSE) { gr <- data.frame(seqnames=rep(c(\"chr1\", \"chr2\", \"chr1\", \"chr3\"), c(1, 3, 2, 4)),            start=1:10,            width=1,            gene_id = rep(c(\"gene1\", \"gene2\", \"gene3\", \"gene4\"), c(4, 2, 1, 3))) |>   plyranges::as_granges() gr split_gr_by_id(gr, key_col=\"gene_id\") }"},{"path":"https://colossal-compsci.github.io/tfboot/reference/tfboot-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tfboot: Bootstrapping and statistical analysis for TFBS-disrupting SNPs — tfboot-package","title":"tfboot: Bootstrapping and statistical analysis for TFBS-disrupting SNPs — tfboot-package","text":"Bootstrap motifbreakR results statistical analysis TFBS-disrupting SNPs upstream regions set genes interest.","code":""},{"path":[]},{"path":"https://colossal-compsci.github.io/tfboot/reference/tfboot-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tfboot: Bootstrapping and statistical analysis for TFBS-disrupting SNPs — tfboot-package","text":"Maintainer: Stephen Turner turner@colossal.com (ORCID) contributors: Colossal Biosciences [copyright holder]","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/vignettedata.html","id":null,"dir":"Reference","previous_headings":"","what":"Vignette data — vignettedata","title":"Vignette data — vignettedata","text":"Pre-cooked data used vignette. data precomputed speed vignette compilation time used throughout examples. Contains list two objects: mbres: Results running motifbreakR five randomly selected genes, run mb_to_tibble. mball: Results running motifbreakR genes, run mb_to_tibble.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/reference/vignettedata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vignette data — vignettedata","text":"","code":"vignettedata"},{"path":"https://colossal-compsci.github.io/tfboot/reference/vignettedata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Vignette data — vignettedata","text":"object class list length 2.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/news/index.html","id":"tfboot-100","dir":"Changelog","previous_headings":"","what":"tfboot 1.0.0","title":"tfboot 1.0.0","text":"Public release. Documentation built pkgdown https://colossal-compsci.github.io/tfboot/. Preprint bioRxiv: FIXME","code":""},{"path":"https://colossal-compsci.github.io/tfboot/news/index.html","id":"tfboot-021","dir":"Changelog","previous_headings":"","what":"tfboot 0.2.1","title":"tfboot 0.2.1","text":"Use simulated chicken @examples previously used “Rosie” requiring nonstandard package run vignette examples. Rewrite read_vcf() function longer use motifbreakR::snps..file() use VariantAnnotation::readVcf() instead, followed post-processing. Move motifbreakR Suggests avoiding hard dependency, since motifbreakR isn’t technically requirement install use tfboot. Added changelog / NEWS.md.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/news/index.html","id":"tfboot-020","dir":"Changelog","previous_headings":"","what":"tfboot 0.2.0","title":"tfboot 0.2.0","text":"Use chicken vignette.","code":""},{"path":"https://colossal-compsci.github.io/tfboot/news/index.html","id":"tfboot-010","dir":"Changelog","previous_headings":"","what":"tfboot 0.1.0","title":"tfboot 0.1.0","text":"Initial version.","code":""}]
